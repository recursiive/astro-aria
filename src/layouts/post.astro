---
import Layout from "./main.astro";
const { frontmatter, slug } = Astro.props;
---

<Layout title={frontmatter.title}>
  <main
    class="relative z-30 max-w-4xl pb-1 mx-auto mt-10 bg-white dark:bg-neutral-950 md:rounded-t-md text-neutral-900"
  >
    <div
      class="relative flex flex-col px-5 pt-6 border-t border-b-0 md:border-r md:border-l md:pt-20 lg:px-0 justify-stretch md:rounded-t-2xl border-neutral-200 dark:border-neutral-800"
    >
      <div
        class="absolute top-0 left-0 hidden w-px h-full mt-1 -translate-x-px md:block bg-gradient-to-b from-transparent to-white dark:to-neutral-950"
      >
      </div>
      <div
        class="absolute top-0 right-0 hidden w-px h-full mt-1 translate-x-px md:block bg-gradient-to-b from-transparent to-white dark:to-neutral-950"
      >
      </div>
      <div class="w-full max-w-2xl mx-auto">
        <h1
          class="text-3xl font-bold leading-tight tracking-tighter text-left md:mb-4 md:text-4xl dark:text-neutral-100 lg:text-5xl md:leading-none"
        >
          {frontmatter.title}
        </h1>
        
        <!-- View count display -->
        <div class="flex items-center gap-4 text-sm text-gray-500 dark:text-gray-400 mb-8">
          <div class="flex items-center gap-1">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
            </svg>
            <span id="total-views" data-view-count>0</span>
            <span class="text-xs">views</span>
          </div>
          <div class="flex items-center gap-1">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>
            </svg>
            <span id="unique-views" data-unique-view-count>0</span>
            <span class="text-xs">unique</span>
          </div>
        </div>
      </div>
    </div>

    <article
      class="w-full max-w-2xl mx-auto mb-20 prose-sm prose px-7 lg:px-0 lg:prose-lg dark:prose-invert"
    >
      <slot />
    </article>
  </main>
  
  <!-- View tracking script -->
  {slug && (
    <script is:inline define:vars={{ slug }}>
      // View tracking utility for blog posts
      class ViewTracker {
        constructor(slug) {
          this.slug = slug;
          this.hasTracked = false;
          this.init();
        }

        async init() {
          // Always load current view count first
          await this.updateViewCount();
          
          // Only track if we haven't already for this session
          if (this.hasTracked) return;
          
          // Check if we've already tracked this view in localStorage (persists across sessions)
          const storageKey = `view_tracked_${this.slug}`;
          const lastTracked = localStorage.getItem(storageKey);
          const oneHour = 60 * 60 * 1000; // 1 hour in milliseconds
          
          // Track view if:
          // 1. Never tracked before, OR
          // 2. Last tracked more than 1 hour ago (allow re-tracking after time interval)
          if (!lastTracked || (Date.now() - parseInt(lastTracked)) > oneHour) {
            await this.trackView();
            
            // Store timestamp of when we tracked this view (only if tracking was successful)
            if (this.hasTracked) {
              localStorage.setItem(storageKey, Date.now().toString());
            }
          }
        }

        async trackView() {
          try {
            const response = await fetch('/api/track-view', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ slug: this.slug })
            });

            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            
            if (data.success) {
              this.hasTracked = true;
              // Update the display immediately after tracking
              this.updateViewDisplay(data.totalViews, data.uniqueViews);
            }
          } catch (error) {
            console.error('Error tracking view:', error);
          }
        }

        async updateViewCount() {
          try {
            const response = await fetch(`/api/track-view?slug=${encodeURIComponent(this.slug)}`);
            
            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            this.updateViewDisplay(data.totalViews, data.uniqueViews);
          } catch (error) {
            console.error('Error fetching view count:', error);
          }
        }

        updateViewDisplay(totalViews, uniqueViews) {
          // Find and update view count elements
          const viewElements = document.querySelectorAll('[data-view-count]');
          const uniqueViewElements = document.querySelectorAll('[data-unique-view-count]');

          viewElements.forEach(element => {
            if (element.hasAttribute('data-show-unique')) {
              element.textContent = uniqueViews || 0;
            } else {
              element.textContent = totalViews || 0;
            }
          });

          uniqueViewElements.forEach(element => {
            element.textContent = uniqueViews || 0;
          });

          // Also update elements with specific IDs for the current post
          const totalViewsElement = document.getElementById('total-views');
          const uniqueViewsElement = document.getElementById('unique-views');

          if (totalViewsElement) {
            totalViewsElement.textContent = totalViews || 0;
          }

          if (uniqueViewsElement) {
            uniqueViewsElement.textContent = uniqueViews || 0;
          }
        }
      }

      // Initialize view tracking with the specific slug when DOM is loaded
      document.addEventListener('DOMContentLoaded', function() {
        if (slug) {
          new ViewTracker(slug);
        }
      });
    </script>
  )}
</Layout>
