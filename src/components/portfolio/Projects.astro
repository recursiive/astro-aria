---
import { siteConfig } from "../../config";
const hasProjects = siteConfig.projects && siteConfig.projects.length > 0;
---

{
  hasProjects && (
    <section class="relative z-20 max-w-7xl mx-auto my-12 px-7 lg:px-8">
      <div class="grid grid-cols-1 lg:grid-cols-12 gap-8 lg:gap-12 items-start">
        <div class="lg:col-span-4 lg:pl-4">
          <h2 class="text-3xl sm:text-4xl md:text-5xl xl:text-7xl font-bold text-white">
            Projects
          </h2>
          <div
            class="w-[75px] h-[5px] mt-2 rounded-full"
            style={`background-color: ${siteConfig.accentColor}`}
          />
        </div>

        <div class="lg:col-span-8 lg:pr-8">
          <div class="max-w-5xl">
            <div class="space-y-3" id="projects-accordion">
              {siteConfig.projects.map((project, index) => {
                const isFirst = index === 0;
                const Component = project.link ? "a" : "div";
                const linkProps = project.link
                  ? {
                      href: project.link,
                      target: project.link.startsWith('/') ? "_self" : "_blank",
                      rel: "noopener noreferrer",
                    }
                  : {};

                return (
                  <div class="project-item glass-card liquid-glass rounded-2xl overflow-hidden border border-gray-700/50 transition-all duration-300 hover:border-gray-600/70">
                    <button
                      class="project-header w-full flex items-center justify-between p-6 text-left hover:bg-white/5 transition-colors duration-200"
                      data-index={index}
                    >
                      <div class="flex items-center gap-4 flex-1 min-w-0">
                        <span
                          class="text-sm font-mono shrink-0"
                          style={{ color: siteConfig.accentColor }}
                        >
                          0{index + 1}
                        </span>
                        <h3 class="text-xl font-bold text-white truncate">
                          {project.name}
                        </h3>
                      </div>
                      <div class="flex items-center gap-3 shrink-0">
                        {project.link && (
                          <a
                            {...linkProps}
                            class="p-2 rounded-lg bg-gray-800/50 hover:bg-gray-700 transition-colors duration-200"
                            onclick="event.stopPropagation()"
                          >
                            <svg
                              class="w-5 h-5 text-white"
                              fill="none"
                              stroke="currentColor"
                              viewBox="0 0 24 24"
                            >
                              <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M7 17L17 7M17 7H7M17 7V17"
                              />
                            </svg>
                          </a>
                        )}
                        <svg
                          class={`w-5 h-5 text-white transition-transform duration-300 shrink-0 chevron-${index}`}
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M19 9l-7 7-7-7"
                          />
                        </svg>
                      </div>
                    </button>
                    
                    <div
                      class={`project-content overflow-hidden transition-all duration-500 ${isFirst ? 'max-h-96 opacity-100' : 'max-h-0 opacity-0'}`}
                      data-content={index}
                    >
                      <div class="px-6 pb-6">
                        <div class="pt-4 space-y-4">
                          <p class="text-gray-300 leading-relaxed">
                            {project.description}
                          </p>
                          
                          {project.skills && project.skills.length > 0 && (
                            <div class="flex flex-wrap gap-2 pt-2">
                              {project.skills.map((skill) => (
                                <span class="px-3 py-1.5 bg-gray-800/50 text-gray-200 rounded-lg text-sm font-medium border border-gray-700/50">
                                  {skill}
                                </span>
                              ))}
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        </div>
      </div>

      <style>
        .project-header {
          cursor: pointer;
        }
        .project-content {
          transition: max-height 0.5s ease-in-out, opacity 0.3s ease-in-out;
        }
      </style>

      <script is:inline>
        document.addEventListener('DOMContentLoaded', function() {
          // Initialize first project as expanded
          const firstChevron = document.querySelector('.chevron-0');
          if (firstChevron) {
            firstChevron.style.transform = 'rotate(180deg)';
          }

          // Add event listeners to all project headers
          const projectHeaders = document.querySelectorAll('.project-header');
          
          projectHeaders.forEach(function(header) {
            header.addEventListener('click', function() {
              const index = parseInt(this.getAttribute('data-index'));
              const content = document.querySelector(`[data-content="${index}"]`);
              const chevron = document.querySelector(`.chevron-${index}`);
              
              const isExpanded = content.classList.contains('max-h-96');
              
              if (isExpanded) {
                // Close this project
                content.classList.remove('max-h-96', 'opacity-100');
                content.classList.add('max-h-0', 'opacity-0');
                chevron.style.transform = 'rotate(0deg)';
              } else {
                // Close all other projects
                document.querySelectorAll('.project-content').forEach(function(el) {
                  const idx = el.getAttribute('data-content');
                  const chv = document.querySelector('.chevron-' + idx);
                  if (idx !== String(index)) {
                    el.classList.remove('max-h-96', 'opacity-100');
                    el.classList.add('max-h-0', 'opacity-0');
                    if (chv) chv.style.transform = 'rotate(0deg)';
                  }
                });
                
                // Open this project
                content.classList.remove('max-h-0', 'opacity-0');
                content.classList.add('max-h-96', 'opacity-100');
                chevron.style.transform = 'rotate(180deg)';
              }
            });
          });
        });
      </script>
    </section>
  )
}